version: 2

jobs:

#  test:
#    docker:
#    # name of root build image
#    - image: circleci/python:3.7.1
#      environment:
#        TERM: "xterm" ## For some circleci base containers, it needs to be set. Circleci wonkiness.
#
#    steps:
#      - checkout
#      - run:
#          name: Download and Install pip
#          command: |
#            if [[ ! -e ~/cache/get-pip.py ]]; then
#              mkdir -p ~/cache && curl "https://bootstrap.pypa.io/get-pip.py" > ~/cache/get-pip.py
#            fi
#
#            pip || sudo python ~/cache/get-pip.py
#
#      - run:
#          name: Install awscli
#          command: sudo pip install awscli
#
#      - run:
#          name: Configure aws cli
#          command: |
#            # Configure aws cli
#            mkdir -p ~/.aws
#
#            echo "[$MFA_PROFILE_NAME]" >> ~/.aws/credentials
#            echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
#            echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
#            echo "[$MFA_PROFILE_NAME]" >> ~/.aws/config
#            echo "region = us-east-1" >> ~/.aws/config
#            echo "output = json" >> ~/.aws/config
#
#      - run:
#          name: Install requirements and run tests
#          command: |
#            sudo apt-get update
#            sudo apt-get install libdbus-glib-1-dev
#
#            cd support/figgy
#            sudo pip install keyrings.alt
#
#            echo "Installing requirements!"
#            sudo pip install -r requirements.txt
#            mkdir -p ~/.figgy/devops/cache/sts
#
#            echo "Running tests!!!"
#
#            mfa set $MFA_USER $MFA_SECRET
#            python run_tests.py

  build_windows:
    docker:
      # name of root build image
      - image: circleci/python:3.7.1
        environment:
            TERM: "xterm" ## For some circleci base containers, it needs to be set. Circleci wonkiness.
    steps:
      # checkout the files from github
      - checkout

      - run:
          name: Download and Install pip
          command: |
            if [[ ! -e ~/cache/get-pip.py ]]; then
              mkdir -p ~/cache && curl "https://bootstrap.pypa.io/get-pip.py" > ~/cache/get-pip.py
            fi

            pip || sudo python ~/cache/get-pip.py

      - run:
          name: Install Python dependencies
          command: sudo pip install awscli requests

      - run:
          name: Build
          command: |

            set +e
            . deploy/utils.sh

            e_arrow "Performing ssm_config build for windows"

            e_notify "Installing i386 (32-bit) architecture support"
            (sudo dpkg --add-architecture i386 > background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Updating apt repository cache"
            (sudo apt update > background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Fixing broken apt packages"
            (sudo apt --fix-broken install > background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Installing Wine dependencies"
            (sudo apt install imagemagick apache2 xvfb software-properties-common > background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Configuring wine apt source"
            echo 'deb http://dl.winehq.org/wine-builds/debian stretch main' | sudo tee -a /etc/apt/sources.list

            e_notify "Getting public key for winehq"
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 76F1A20FF987672F > /dev/null 2>&1

            e_notify "Updating apt repository cache"
            (sudo apt update -qq 2> background_log || touch fail) &
            wait_for_job 1

            e_notify "Installing wine"
            (sudo apt install wine-stable=4.0.3~stretch wine-stable-amd64=4.0.3~stretch wine-stable-i386=4.0.3~stretch winehq-stable=4.0.3~stretch 2> background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Updating path for wine-stable"
            export PATH=$PATH:/opt/wine-stable/bin

            sudo chown circleci background_log

            e_notify "Downloading winetricks"
            (wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks > background_log 2>&1 || touch fail) &
            wait_for_job 1

            (chmod u+x winetricks >> background_log 2>&1 || touch fail) &
            wait_for_job 1

            # Bump windows version to windows 7
            e_notify "Enabling win7 mode for winetricks"
            (./winetricks win7 > background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Creating package cache directories"
            mkdir -p "/home/circleci/.wine/drive_c/users/circleci/Local Settings/Application Data/Package Cache/{8a84877c-26dd-4b77-8117-80eaec80127c}"
            chmod 777 "/home/circleci/.wine/drive_c/users/circleci/Local Settings/Application Data/Package Cache/{8a84877c-26dd-4b77-8117-80eaec80127c}"
            sudo chown root "/home/circleci/.wine/drive_c/users/circleci/Local Settings/Application Data/Package Cache/{8a84877c-26dd-4b77-8117-80eaec80127c}"

            mkdir -p "/home/circleci/.wine/drive_c/users/circleci/Local Settings/Application Data/Package Cache/{bad6cd9b-5387-4593-b0c3-42f6306ff74}"
            chmod 777 "/home/circleci/.wine/drive_c/users/circleci/Local Settings/Application Data/Package Cache/{bad6cd9b-5387-4593-b0c3-42f6306ff74}"
            sudo chown root "/home/circleci/.wine/drive_c/users/circleci/Local Settings/Application Data/Package Cache/{bad6cd9b-5387-4593-b0c3-42f6306ff74}"

            e_notify "Downloading python 3.7.3-amd64"
            (wget https://www.python.org/ftp/python/3.7.3/python-3.7.3-amd64.exe > background_log 2>&1 || touch fail) &
            wait_for_job 1

            e_notify "Initializing Xwindows buffer"
            sudo Xvfb :1 -screen 0 800x600x24 &

            e_notify "Setting DISPLAY=:1 for pseudo framebuffer support for executables that require a GUI"
            export DISPLAY=:1

            e_notify "Installing python 3.7.3-amd64 - Ignoring Exit Code"
            wine python-3.7.3-amd64.exe /quiet /install /log install.log InstallAllUsers=1 PrependPath=1 DefaultAllUsersTargetDir=c:\\python37

            e_notify "Installing pyinstaller"
            wine python -m pip install pyinstaller

            # install requirements
            cd support/figgy
            echo "Installing figgy pip requirements"
            DISPLAY=:1 wine python -m pip install -r requirements.txt
            DISPLAY=:1 wine python -m pip install -r requirements-windows.txt

            echo "Running pyinstaller to build figgy"
            DISPLAY=:1 wine pyinstaller figgy.py --onefile --hiddenimport configparser --hiddenimport pyreadline --hiddenimport win32timezone --hiddenimport keyrings  --hiddenimport pkg_resources.py2_warn --hiddenimport keyring.backends

            dest="s3://figgy-website/releases/cli/latest/windows/figgy.exe"

            echo "Deploying Windows figgy.exe to: $dest"
            aws s3 cp dist/figgy.exe $dest

  build_linux:
    docker:
      # name of root build image
      - image: circleci/python:3.7.1
        environment:
            TERM: "xterm" ## For some circleci base containers, it needs to be set. Circleci wonkiness.
    steps:
      # checkout the files from github
      - checkout

      - run:
          name: Download and Install pip
          command: |
            if [[ ! -e ~/cache/get-pip.py ]]; then
              mkdir -p ~/cache && curl "https://bootstrap.pypa.io/get-pip.py" > ~/cache/get-pip.py
            fi

            pip || sudo python ~/cache/get-pip.py

      - run:
          name: Install Python dependencies
          command: sudo pip install awscli requests

      - run:
          name: Build
          command: |
            echo "Linux build is happening!!!"

            # install requirements
            cd support/figgy
            sudo pip install pyinstaller
            sudo pip install -r requirements.txt
            sudo pip install -r requirements-linux.txt

            pyinstaller figgy.py --onefile --log-level=DEBUG --hiddenimport configparser --hiddenimport keyrings --hiddenimport keyring.backends --hiddenimport pkg_resources.py2_warn
            dest="s3://figgy-website/releases/latest/linux/figgy"

            echo "Deploying linux figgy to $dest"
            aws s3 cp dist/figgy $dest

  build_mac:
    macos:
      xcode: "9.0"
    steps:
      # checkout the files from github
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew update
            brew uninstall python
            brew install awscli
            brew install python3

      - run:
          name: Build
          command: |
            echo "MacOs build is happening!!!"
            cd support/figgy
            pip3 install pyinstaller
            pip3 install -r requirements.txt

            ## Build OneFile
            pyinstaller figgy.py --onefile --log-level=DEBUG --hiddenimport configparser --hiddenimport keyrings --hiddenimport keyring.backends --hiddenimport pycrypto  --hiddenimport pkg_resources.py2_warn
            dest="s3://figgy-website/releases/cli/latest/darwin/figgy"

            ## Build OneDir
            echo "Deploying OSX figgy to $dest"
            aws s3 cp dist/figgy $dest
            rm dist/figgy

            echo "Building figgy onedir"
            pyinstaller figgy.py --onedir --log-level=DEBUG --hiddenimport configparser --hiddenimport keyrings --hiddenimport keyring.backends --hiddenimport pycrypto  --hiddenimport pkg_resources.py2_warn
            cd dist/figgy
            zip -r figgy.zip .

            dest="s3://figgy-website/releases/cli/latest/darwin/figgy.zip"
            aws s3 cp figgy.zip $dest


workflows:
  version: 2
  build_all:
    jobs:
      - build_windows:
          context: cicd-context
          requires:
            - build_linux
          filters:
            branches:
              only:
                - master
                - windows
                - develop
      - build_linux:
          context: cicd-context
          requires:
            - build_mac
          filters:
            branches:
              only:
              - master
              - develop
      - build_mac:
          context: cicd-context
          filters:
            branches:
              only:
              - master
              - mac
              - develop





