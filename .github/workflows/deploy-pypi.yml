name: Build & Test

on:
  push:
    branches: [develop, master]
  pull_request:
    branches: [develop, master]

jobs:
  test_bastion:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        env:
          FIGGY_TEST: true
        run: |
          sudo apt-get update \
          && sudo apt-get install libusb-1.0-0-dev libxmu-dev libxmu-headers \
          freeglut3-dev libxext-dev libxi-dev libudev1 libudev-dev

      - name: Install figgy
        run: |
          cd cli
          pip install -r requirements.txt
          pip install -r requirements-linux.txt
          scripts/install.sh

      - name: Run E2E Test Suite
        run: |
          export TERM=linux
          export TERMINFO=/etc/terminfo
          cd cli
          python run_tests.py bastion

#  test_google:
#    runs-on: ubuntu-latest
#    needs: [test_okta]
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      - name: Install dependencies
#        env:
#          FIGGY_TEST: true
#        run: |
#          sudo apt-get update \
#          && sudo apt-get install libusb-1.0-0-dev libxmu-dev libxmu-headers \
#          freeglut3-dev libxext-dev libxi-dev libudev1 libudev-dev
#
#      - name: Install figgy
#        run: |
#          cd cli
#          pip install -r requirements.txt
#          pip install -r requirements-linux.txt
#          scripts/install.sh
#      - name: Run E2E Test Suite
#        env:
#          OVERRIDE_KEYRING: true
#          GOOGLE_IDP_ID: ${{ secrets.GOOGLE_IDP_ID }}
#          GOOGLE_SP_ID: ${{ secrets.GOOGLE_SP_ID }}
#          GOOGLE_SSO_PASSWORD: ${{ secrets.GOOGLE_SSO_PASSWORD }}
#          GOOGLE_SSO_USER: ${{ secrets.GOOGLE_SSO_USER }}
#        run: |
#          export TERM=linux
#          export TERMINFO=/etc/terminfo
#          cd cli
#          python run_tests.py google

  test_okta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        env:
          FIGGY_TEST: true
        run: |
          sudo apt-get update \
          && sudo apt-get install libusb-1.0-0-dev libxmu-dev libxmu-headers \
          freeglut3-dev libxext-dev libxi-dev libudev1 libudev-dev

      - name: Install figgy
        run: |
          cd cli
          pip install -r requirements.txt
          pip install -r requirements-linux.txt
          scripts/install.sh
          
      - name: Run E2E Test Suite
        env:
          OVERRIDE_KEYRING: true
          OKTA_SSO_USER: ${{ secrets.OKTA_SSO_USER }}
          OKTA_SSO_PASSWORD: ${{ secrets.OKTA_SSO_PASSWORD }}
          OKTA_EMBED_URL: ${{ secrets.OKTA_EMBED_URL }}
          OKTA_MFA_SECRET: ${{ secrets.OKTA_MFA_SECRET }}
        run: |
          export TERM=linux
          export TERMINFO=/etc/terminfo
          cd cli
          python run_tests.py okta

  test_profile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        env:
          FIGGY_TEST: true
        run: |
          sudo apt-get update \
          && sudo apt-get install libusb-1.0-0-dev libxmu-dev libxmu-headers \
          freeglut3-dev libxext-dev libxi-dev libudev1 libudev-dev

      - name: Install figgy
        run: |
          cd cli
          pip install -r requirements.txt
          pip install -r requirements-linux.txt
          scripts/install.sh

      - name: Run E2E Test Suite
        env:
          OVERRIDE_KEYRING: true
          CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
          CREDENTIALS_FILE: ${{ secrets.CREDENTIALS_FILE }}
        run: |
          echo "$CONFIG_FILE" > ~/.aws/config
          echo "$CREDENTIALS_FILE" > ~/.aws/credentials

          export TERM=linux
          export TERMINFO=/etc/terminfo
          cd cli
          python run_tests.py okta

  release:
    if: github.ref == 'refs/heads/master'
    needs: [test_bastion, test_okta, test_profile]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        sudo apt-get install libusb-1.0-0-dev
        python -m pip install --upgrade pip
        pip install setuptools twine pip wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Upload To PyPi
      env:
        PYPI_RC: ${{ secrets.PYPI_FIGGY_CLI }}
      run: |
        echo "${PYPI_RC}" > ~/.pypirc
        cd cli
        ./scripts/deploy-pypi.sh

    - name: Prep Release
      id: prep
      run: |
        cd cli
        # Parse version
        VERSION=$(./scripts/get_version.sh)
        echo "Setting release version to $VERSION"
        echo "::set-env name=RELEASE_VERSION::$VERSION"

        # Parse changelog
        CHANGELOG=$(./scripts/parse_changelog.sh)
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

        echo "Got changelog: $CHANGELOG"
        echo "::set-output name=changelog::$CHANGELOG"

    - name: Create Release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: ${{ steps.prep.outputs.changelog }}
        draft: false
        prerelease: true